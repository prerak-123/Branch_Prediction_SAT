#include "cache.h"

int* freq;
// initialize replacement state
void CACHE::llc_initialize_replacement()
{
	// cout << NUM_SET << " " << NUM_WAY <<endl;
	freq = new int[NUM_SET*NUM_WAY];

	for(int i = 0; i < NUM_SET*NUM_WAY; i++){
		freq[i] = 0;	
	}
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
	int way = 0;	
	for (way=0; way<NUM_WAY; way++) {

		if (block[set][way].valid == false) {
			DP ( if (warmup_complete[cpu]) {
					cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
					cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
					cout << dec << " lru: " << block[set][way].lru << endl; });

			break;
		}
	}

	// LFU victim
	if (way == NUM_WAY) {
		int min_freq = freq[set*NUM_WAY + 0];
		int min_index = 0;
		for(way = 0; way < NUM_WAY; way++){
			if(freq[set*NUM_WAY + way] < min_freq){
				min_index = way;
				min_freq = freq[set*NUM_WAY + way];
			}
		}
		return min_index;
	}

	else{
		return way;
	}
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
	string TYPE_NAME;
	if (type == LOAD)
		TYPE_NAME = "LOAD";
	else if (type == RFO)
		TYPE_NAME = "RFO";
	else if (type == PREFETCH)
		TYPE_NAME = "PF";
	else if (type == WRITEBACK)
		TYPE_NAME = "WB";
	else
		assert(0);

	if (hit)
		TYPE_NAME += "_HIT";
	else
		TYPE_NAME += "_MISS";

	if ((type == WRITEBACK) && ip)
		assert(0);

	// uncomment this line to see the LLC accesses
	// cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
	// cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

	// baseline LRU
	//if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
	//	return;

	if(hit){
		freq[set*NUM_WAY + way]++;
	}
	else{
		freq[set*NUM_WAY + way] = 0;
	}  
}

void CACHE::llc_replacement_final_stats()
{
	delete[] freq;
}